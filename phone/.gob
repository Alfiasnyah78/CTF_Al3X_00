# app.py (versi ditingkatkan dengan UI keren, autentikasi, dan Google Maps)
from flask import Flask, render_template, request, redirect, url_for, session
import phonenumbers
from phonenumbers import geocoder, carrier, timezone
import requests
import os
import sqlite3

app = Flask(__name__)
app.secret_key = os.urandom(24)

# Dummy credentials (ganti dengan yang aman di produksi)
USERS = {
    "alfyn": "password"
}


def lookup_number(number):
    try:
        parsed_number = phonenumbers.parse(number)
        location = geocoder.description_for_number(parsed_number, 'id')
        provider = carrier.name_for_number(parsed_number, 'id')
        timezones = timezone.time_zones_for_number(parsed_number)

        api_key = ""  # Isi dengan API key Numverify jika ada
        additional_info = {}
        if api_key:
            url = f"http://apilayer.net/api/validate?access_key={api_key}&number={number}"
            r = requests.get(url)
            if r.status_code == 200:
                data = r.json()
                additional_info = {
                    "country": data.get("country_name"),
                    "location": data.get("location"),
                    "line_type": data.get("line_type"),
                    "carrier_api": data.get("carrier"),
                    "lat": data.get("latitude"),
                    "lon": data.get("longitude")
                }

        return {
            "number": number,
            "location": location,
            "provider": provider,
            "timezones": timezones,
            "additional": additional_info
        }

    except Exception as e:
        return {"error": str(e)}


def init_db():
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("DROP TABLE IF EXISTS users")
    c.execute("CREATE TABLE users (id INTERGER PRIMARY KEY, username TEXT, password TEXT)")
    c.execute("INSERT INTO users (username, password) VALUES ('admin', 'supersecret')")
    con.commit()
    conn.close()

init_db()



@app.route("/", methods=["GET", "POST"])
def index():
    if not session.get("logged_in"):
        return redirect(url_for("login"))

    result = None
    if request.method == "POST":
        number = request.form.get("phone")
        result = lookup_number(number)
    return render_template("index.html", result=result)


@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        query = f"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'"
        con = sqlite3.connect("users.db")
        c = conn.cursor()
        c.execute(query)
        result = c.fetchone()
        conn.close()
        if USERS.get(username) == password:
            session["logged_in"] = True
            return redirect(url_for("index"))
        else:
            return render_template("login.html", error="Username atau password salah.")
    return render_template("login.html")

@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")

        users = load_users()
        if username in users:
            return render_template("register.html", error="Username sudah digunakan.")
        
        users[username] = password
        save_users(users)
        return redirect(url_for("login"))

    return render_template("register.html")


@app.route("/logout")
def logout():
    session.clear()
    return redirect(url_for("login"))


if __name__ == "__main__":
    app.run(host='0.0.0.0',port=6723, debug=True)

